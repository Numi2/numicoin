Below is the quickest way to prove everything builds and that the miner actually finds blocks.

────────────────────────────
1. Build the release binary
────────────────────────────
```bash
# From the project root
cargo build --release
```

This produces `target/release/numi-core`  
(≈ 1–2 min on a typical laptop; subsequent builds are incremental).

────────────────────────────
2. Launch a fresh dev-net node
────────────────────────────
```bash
target/release/numi-core start --mine --threads <NUM_CPUS>
```

What happens:

1. Loads `numi.toml` (or creates defaults)  
2. Spins up the RPC server (default `127.0.0.1:8080`)  
3. Starts the Stratum server (default `0.0.0.0:3333`)  
4. Fires the built-in CPU-miner in the background  
5. Logs each solved block, e.g.

```
⛏️  Mined block 43 with hash 0000b3…  
✅ Successfully added mined block 43 to blockchain  
💰 Miner balance: 12.0 NUMI (N123…)
```

────────────────────────────
3. Point an external miner (optional)
────────────────────────────
If you’d rather test through Stratum instead of the internal CPU miner:

```text
Stratum TCP URL : stratum+tcp://<NODE_IP>:3333
Worker username : anything
Password        : x
```

Any generic Stratum-v1 client that submits `mining.get_job` / `mining.submit`
will be accepted.  Shares that satisfy the difficulty are promoted to blocks
and broadcast to the local test-net immediately.

────────────────────────────
4. Query via RPC
────────────────────────────
Example: current height & supply

```bash
curl -s http://127.0.0.1:8080/status | jq .
```

Mine one block on demand (uses the production-grade `Miner::mine_block`):

```bash
curl -s -X POST http://127.0.0.1:8080/mine -d '{"threads":4,"timeout_seconds":120}' | jq .
```

────────────────────────────
That’s it—builds cleanly, mines real blocks, no placeholders.